selection:
  ### use `&`, `|`, `~` for logical operations on numpy arrays
  ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
  (jet_pt>50) & (jet_pt<100)

new_variables:
  ### [format] name: formula
  ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
  idx: _hash(jet_pt, jet_eta, jet_phi)
  part_mask: ak.ones_like(part_px)
  part_pt: np.hypot(part_px, part_py)
  part_pt_log: np.log(part_pt)
  part_e_log: np.log(part_energy)
  part_logptrel: np.log(part_pt/jet_pt)
  part_logerel: np.log(part_energy/jet_energy)
  p4: _p4_from_pxpypze(part_px, part_py, part_pz, part_energy)
  jet_p4: _p4_from_ptetaphie(jet_pt, jet_eta, jet_phi, jet_energy)
  part_dphi: p4.deltaphi(jet_p4)
  part_deta: np.where(jet_p4.eta>0, p4.deltaeta(jet_p4), -p4.deltaeta(jet_p4))
  part_deltaR: np.hypot(part_deta, part_dphi)
  jet_isQ: sample==2
  jet_isG: sample==1

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
  pf_points:
    length: 50
    pad_mode: wrap
    vars:
      - [part_deta, null]
      - [part_dphi, null]
  pf_features:
    length: 50
    pad_mode: wrap
    vars:
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name,
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
      ###              multiply_by(optional, default=1),
      ###              clip_min(optional, default=-5),
      ###              clip_max(optional, default=5),
      ###              pad_value(optional, default=0)]
      - [part_pt_log, 1.7, 0.7]
      - [part_e_log, 2.0, 0.7]
      - [part_logptrel, -4.7, 0.7]
      - [part_logerel, -4.7, 0.7]
      - [part_deltaR, 0.2, 4.0]
      - [part_deta, null]
      - [part_dphi, null]
  pf_vectors:
    length: 50
    pad_mode: wrap
    vars:
      - [part_px, null]
      - [part_py, null]
      - [part_pz, null]
      - [part_energy, null]
  pf_mask:
    length: 50
    pad_mode: constant
    vars:
      - [part_mask, null]

labels:
  ### type can be `simple`, `custom`
  ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
  type: simple
  value: [jet_isQ, jet_isG]
  ### [option 2] otherwise use `custom` to define the label, then `value` is a map
  # type: custom
  # value:
  #    truth_label: label.argmax(1)

observers:
  - jet_pt
  - jet_eta

weights:
  ### [option 1] use precomputed weights stored in the input files
  # use_precomputed_weights: true
  # weight_branches: [weight, class_weight]
  ### [option 2] compute weights on-the-fly using reweighting histograms
  use_precomputed_weights: false
  reweight_method: flat
  reweight_vars:
    jet_pt: [-1.0e+99, 1.0e+99]
    jet_eta: [-1.0e+99, 1.0e+99]
  reweight_classes: [jet_isQ, jet_isG]
  class_weights: [1, 1]
  reweight_hists:
